# ui/order_window.py
import json
import tkinter as tk
from tkinter import ttk, messagebox
from models import Order
from database import get_connection
from datetime import datetime, timedelta
from utils import center_window

class OrderWindow:
    def __init__(self, root, client_id):
        self.root = root
        self.root.title("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
        self.root.geometry("600x500")
        center_window(self.root, 600, 500)
        self.client_id = client_id
        self.items = [
            {"name": "–ü–µ–ø–ø–µ—Ä–æ–Ω–∏", "price": 350},
            {"name": "–ú–∞—Ä–≥–∞—Ä–∏—Ç–∞", "price": 300},
            {"name": "–ì–∞–≤–∞–π—Å–∫–∞—è", "price": 400},
            {"name": "–ß–µ—Ç—ã—Ä–µ —Å—ã—Ä–∞", "price": 450},
        ]
        self.selected_items = []
        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.root, text="–í—ã–±–µ—Ä–∏—Ç–µ –ø–∏—Ü—Ü—ã", font=("Arial", 16)).pack(pady=10)
        self.item_vars = []

        for item in self.items:
            var = tk.IntVar()
            frame = tk.Frame(self.root)
            frame.pack(anchor="w", padx=20, pady=5)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤
            available, reason = self.check_pizza_availability(item["name"], 1)
            state = "normal" if available else "disabled"

            checkbox = tk.Checkbutton(frame, variable=var, state=state)
            checkbox.pack(side="left")

            label_text = f"{item['name']} ‚Äî {item['price']} —Ä—É–±"
            if not available:
                label_text += f" ({reason})"

            tk.Label(frame, text=label_text).pack(side="left", padx=10)
            qty = tk.Spinbox(frame, from_=1, to=10, width=5, state=state)
            qty.pack(side="left")
            self.item_vars.append((var, qty, item))

        tk.Button(self.root, text="–ü–æ—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É", command=self.calculate_total).pack(pady=10)
        self.summary_label = tk.Label(self.root, text="", justify="left")
        self.summary_label.pack(pady=10)
        self.confirm_button = tk.Button(self.root, text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", command=self.confirm_order)
        self.confirm_button.pack(pady=10)
        self.confirm_button.pack_forget()  # –°–∫—Ä—ã—Ç–∞ –¥–æ –ø–æ–¥—Å—á—ë—Ç–∞

    def check_pizza_availability(self, pizza_name, quantity):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∏—Ü—Ü—ã"""
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT i.name, pi.required_quantity 
            FROM pizza_ingredients pi
            JOIN ingredients i ON pi.ingredient_id = i.id
            WHERE pi.pizza_name = ?
        ''', (pizza_name,))
        required_ingredients = cursor.fetchall()

        for ing_name, req_qty_per_pizza in required_ingredients:
            cursor.execute("SELECT quantity FROM ingredients WHERE name=?", (ing_name,))
            current_qty = cursor.fetchone()[0]
            total_needed = req_qty_per_pizza * quantity

            if current_qty < total_needed:
                conn.close()
                return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {ing_name} ({current_qty} –∏–∑ {total_needed})"
        
        conn.close()
        return True, ""

    def calculate_total(self):
        self.selected_items = []
        for var, qty, item in self.item_vars:
            if var.get() == 1:
                quantity = int(qty.get())
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –ø–∏—Ü—Ü—ã
                available, reason = self.check_pizza_availability(item["name"], quantity)
                if not available:
                    messagebox.showwarning("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", f"–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è {item['name']} (x{quantity}): {reason}")
                    return

                self.selected_items.append({
                    "name": item["name"],
                    "price": item["price"],
                    "quantity": quantity
                })

        if not self.selected_items:
            self.summary_label.config(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–∏—Ü—Ü—É.")
            self.confirm_button.pack_forget()
            return

        summary_text = ""
        total = 0
        for item in self.selected_items:
            price = item["price"] * item["quantity"]
            total += price
            summary_text += f"{item['name']} x{item['quantity']} ‚Äî {price:.2f} —Ä—É–±\n"
        summary_text += f"\n–ò—Ç–æ–≥–æ: {total:.2f} —Ä—É–±"

        self.summary_label.config(text=summary_text)
        self.confirm_button.pack(pady=10)

    def check_pizza_availability(self, pizza_name, quantity):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∏—Ü—Ü"""
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute('''
            SELECT i.name, pi.required_quantity 
            FROM pizza_ingredients pi
            JOIN ingredients i ON pi.ingredient_id = i.id
            WHERE pi.pizza_name = ?
        ''', (pizza_name,))
        required_ingredients = cursor.fetchall()

        for ing_name, req_qty_per_pizza in required_ingredients:
            total_required = req_qty_per_pizza * quantity
            cursor.execute("SELECT quantity FROM ingredients WHERE name=?", (ing_name,))
            current_qty = cursor.fetchone()[0]
            if current_qty < total_required:
                conn.close()
                return False, f"{ing_name}: —Ç—Ä–µ–±—É–µ—Ç—Å—è {total_required}, –¥–æ—Å—Ç—É–ø–Ω–æ {current_qty}"

        conn.close()
        return True, ""

    def confirm_order(self):
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM orders WHERE client_id = ? AND status NOT IN ('–í—ã–¥–∞–Ω', '–û—Ç–º–µ–Ω—ë–Ω')", (self.client_id,))
        active_order = cursor.fetchone()
        conn.close()
        if active_order:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –∑–∞–∫–∞–∑.")
            return

        total_price = sum(item["price"] * item["quantity"] for item in self.selected_items)
        Order.create(self.client_id, total_price, self.selected_items)
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT last_insert_rowid()")
        order_id = cursor.fetchone()[0]
        conn.close()
        messagebox.showinfo("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω", "–í–∞—à –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω!")
        self.root.destroy()
        from ui.main_window import MainWindow
        MainWindow(tk.Tk(), client_id=self.client_id)


# ==============================
# –ö–ª–∏–µ–Ω—Ç—Å–∫–∞—è —á–∞—Å—Ç—å: –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
# ==============================

class StatusWindow:
    def __init__(self, root, order_id):
        self.root = root
        self.root.title("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
        self.root.geometry("600x450")
        center_window(self.root, 600, 450)
        self.order_id = order_id
        self.create_widgets()
        self.load_order_info()
        self.start_auto_update()

    def create_widgets(self):
        self.status_label = tk.Label(self.root, text="–°—Ç–∞—Ç—É—Å: –ó–∞–≥—Ä—É–∑–∫–∞...", font=("Arial", 16))
        self.status_label.pack(pady=20)

        self.time_label = tk.Label(self.root, text="–í—Ä–µ–º—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: --", font=("Arial", 14))
        self.time_label.pack(pady=10)

        self.progress = tk.Label(self.root, text="–≠—Ç–∞–ø—ã –≥–æ—Ç–æ–≤–∫–∏:", font=("Arial", 14))
        self.progress.pack(pady=10)

        self.steps_labels = []
        steps = ["–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", "–í—ã–ø–µ–∫–∞–Ω–∏–µ", "–£–ø–∞–∫–æ–≤–∫–∞", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"]
        for step in steps:
            label = tk.Label(self.root, text=f"üîπ {step}")
            label.pack(anchor="w", padx=40)
            self.steps_labels.append(label)

        self.cancel_button = tk.Button(self.root, text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", fg="red", command=self.cancel_order)
        self.cancel_button.pack(pady=10)

        tk.Button(self.root, text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", command=self.back_to_menu).pack(pady=10)

    def load_order_info(self):
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT status, created_at, details, cancel_reason FROM orders WHERE id=?", (self.order_id,))
        row = cursor.fetchone()
        conn.close()

        if row:
            self.status, created_at, details_json, self.cancel_reason = row
            self.created_time = datetime.strptime(created_at, "%Y-%m-%d %H:%M:%S")
            self.cooking_ends = self.created_time + timedelta(minutes=15)
        else:
            self.status = "–ù–µ –Ω–∞–π–¥–µ–Ω"
            self.cancel_reason = None

    def start_auto_update(self):
        self.update_status()
        self.root.after(3000, self.start_auto_update)

    def update_status(self):
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT status, cancel_reason FROM orders WHERE id=?", (self.order_id,))
        row = cursor.fetchone()
        conn.close()

        if row:
            new_status, cancel_reason = row
            self.status = new_status
            self.cancel_reason = cancel_reason

            colors = {
                "–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è": "gray",
                "–ü—Ä–∏–Ω—è—Ç": "orange",
                "–ì–æ—Ç–æ–≤–∏—Ç—Å—è": "blue",
                "–ì–æ—Ç–æ–≤": "green",
                "–í—ã–¥–∞–Ω": "darkgreen",
                "–û—Ç–º–µ–Ω—ë–Ω": "red"
            }

            self.status_label.config(text=f"–°—Ç–∞—Ç—É—Å: {self.status}", fg=colors.get(self.status, "black"))

            now = datetime.now()
            if self.status == "–ì–æ—Ç–æ–≤–∏—Ç—Å—è":
                remaining = self.cooking_ends - now
                minutes, seconds = divmod(remaining.seconds, 60)
                self.time_label.config(text=f"–í—Ä–µ–º—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {minutes} –º–∏–Ω {seconds} —Å–µ–∫")
            elif self.status == "–ì–æ—Ç–æ–≤":
                self.time_label.config(text="–í—Ä–µ–º—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: –ì–æ—Ç–æ–≤!")
            else:
                self.time_label.config(text="---")

            if self.status == "–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è":
                self._set_steps(["‚úî –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è"], reset=True)
            elif self.status == "–ü—Ä–∏–Ω—è—Ç":
                self._set_steps([
                    "‚úî –ü—Ä–∏–Ω—è—Ç",
                    "üî∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
                    "üî∏ –í—ã–ø–µ–∫–∞–Ω–∏–µ",
                    "üî∏ –£–ø–∞–∫–æ–≤–∫–∞",
                    "üî∏ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
                ])
            elif self.status == "–ì–æ—Ç–æ–≤–∏—Ç—Å—è":
                self._set_steps([
                    "‚úî –ü—Ä–∏–Ω—è—Ç",
                    "‚úî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
                    "‚úî –í—ã–ø–µ–∫–∞–Ω–∏–µ",
                    "‚úî –£–ø–∞–∫–æ–≤–∫–∞",
                    "üî∏ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
                ])
            elif self.status == "–ì–æ—Ç–æ–≤":
                self._set_steps([
                    "‚úî –ü—Ä–∏–Ω—è—Ç",
                    "‚úî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
                    "‚úî –í—ã–ø–µ–∫–∞–Ω–∏–µ",
                    "‚úî –£–ø–∞–∫–æ–≤–∫–∞",
                    "‚úî –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
                ])

    def _set_steps(self, texts, reset=False):
        for i in range(len(self.steps_labels)):
            if i < len(texts) and texts[i]:
                self.steps_labels[i].config(text=texts[i])
            else:
                self.steps_labels[i].config(text="üî∏ –≠—Ç–∞–ø")

    def back_to_menu(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑
        if self.status == "–û—Ç–º–µ–Ω—ë–Ω" or self.status == "–í—ã–¥–∞–Ω":
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM orders WHERE id=?", (self.order_id,))
            conn.commit()
            conn.close()

        self.root.destroy()
        from ui.main_window import MainWindow
        MainWindow(tk.Tk(), client_id=self.client_id)

    def cancel_order(self):
        reason = "–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑"
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE orders SET status='–û—Ç–º–µ–Ω—ë–Ω', cancel_reason=? WHERE id=?", (reason, self.order_id))
        conn.commit()
        conn.close()
        messagebox.showinfo("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω", "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.")
        self.root.destroy()
        # ‚úÖ –ò–º–ø–æ—Ä—Ç –≤–Ω—É—Ç—Ä–∏ –º–µ—Ç–æ–¥–∞
        from ui.main_window import MainWindow
        MainWindow(tk.Tk())


# ==============================
# –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å: –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
# ==============================

class OrderStatusUpdateWindow:
    def __init__(self, root, order_id):
        self.root = root
        self.root.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞")
        self.root.geometry("600x500")
        center_window(self.root, 600, 500)
        self.order_id = order_id
        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.root, text="–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", font=("Arial", 12)).pack(pady=10)
        self.status_var = tk.StringVar(value="–ü—Ä–∏–Ω—è—Ç")
        statuses = ["–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è", "–ü—Ä–∏–Ω—è—Ç", "–ì–æ—Ç–æ–≤–∏—Ç—Å—è", "–ì–æ—Ç–æ–≤", "–í—ã–¥–∞–Ω", "–û—Ç–º–µ–Ω—ë–Ω"]
        for status in statuses:
            tk.Radiobutton(self.root, text=status, variable=self.status_var, value=status).pack()

        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
        tk.Button(self.root, text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", command=self.update_status).pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤"
        tk.Button(self.root, text="–ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", command=self.back_to_list).pack(pady=5)

        # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞
        self.status_var.trace_add("write", self.on_status_change)

    def on_status_change(self, *args):
        selected = self.status_var.get()
        if selected == "–û—Ç–º–µ–Ω—ë–Ω":
            self.open_cancel_reason_dialog()
        elif selected == "–ì–æ—Ç–æ–≤–∏—Ç—Å—è":
            self.open_cooking_time_dialog()

    def open_cancel_reason_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã")
        dialog.geometry("400x200")
        center_window(dialog, 400, 200)

        tk.Label(dialog, text="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã:", font=("Arial", 12)).pack(pady=10)
        reason_entry = tk.Entry(dialog, width=50)
        reason_entry.pack(pady=10)

        def confirm_cancel():
            reason = reason_entry.get().strip()
            if not reason:
                messagebox.showwarning("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞")
                return
            self.cancel_reason = reason
            dialog.destroy()

        tk.Button(dialog, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=confirm_cancel).pack(pady=10)

    def open_cooking_time_dialog(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è"""
        dialog = tk.Toplevel(self.root)
        dialog.title("–í—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
        dialog.geometry("400x200")
        center_window(dialog, 400, 200)

        tk.Label(dialog, text="–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è (–º–∏–Ω):", font=("Arial", 12)).pack(pady=10)
        time_input = tk.Spinbox(dialog, from_=5, to=60, width=5)
        time_input.pack(pady=10)

        def confirm_cooking_time():
            cook_minutes = time_input.get().strip()
            if not cook_minutes.isdigit():
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è")
                return
            self.cook_minutes = int(cook_minutes)
            dialog.destroy()

        tk.Button(dialog, text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", command=confirm_cooking_time).pack(pady=10)

    def update_status(self):
        new_status = self.status_var.get()
        conn = None
        try:
            conn = get_connection()
            cursor = conn.cursor()

            if new_status == "–ì–æ—Ç–æ–≤–∏—Ç—Å—è":
                cooking_started = datetime.now()
                cooking_ends = cooking_started + timedelta(minutes=self.cook_minutes)

                # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                cursor.execute("SELECT details FROM orders WHERE id=?", (self.order_id,))
                row = cursor.fetchone()
                if not row or not row[0]:
                    messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞")
                    return

                order_details = json.loads(row[0])

                # –í—ã—á–∏—Å–ª—è–µ–º –∏ –≤—ã—á–∏—Ç–∞–µ–º –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
                for item in order_details:
                    pizza_name = item["name"]
                    quantity = item["quantity"]

                    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±—É–µ–º—ã–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –¥–ª—è —ç—Ç–æ–π –ø–∏—Ü—Ü—ã
                    cursor.execute('''
                        SELECT i.id, pi.required_quantity 
                        FROM pizza_ingredients pi
                        JOIN ingredients i ON pi.ingredient_id = i.id
                        WHERE pi.pizza_name = ?
                    ''', (pizza_name,))
                    ingredients_needed = cursor.fetchall()

                    for ing_id, req_qty_per_pizza in ingredients_needed:
                        total_required = req_qty_per_pizza * quantity
                        cursor.execute("UPDATE ingredients SET quantity = quantity - ? WHERE id=?", (total_required, ing_id))

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –≤—Ä–µ–º—è
                cursor.execute(
                    "UPDATE orders SET status=?, cooking_started_at=?, cooking_ends_at=? WHERE id=?",
                    (new_status, cooking_started.strftime("%Y-%m-%d %H:%M:%S"), cooking_ends.strftime("%Y-%m-%d %H:%M:%S"), self.order_id)
                )

            elif new_status == "–û—Ç–º–µ–Ω—ë–Ω":
                cursor.execute(
                    "UPDATE orders SET status=?, cancel_reason=? WHERE id=?",
                    (new_status, self.cancel_reason, self.order_id)
                )
            else:
                cursor.execute(
                    "UPDATE orders SET status=? WHERE id=?",
                    (new_status, self.order_id)
                )

            conn.commit()
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{self.order_id} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ '{new_status}'")
            self.back_to_list()
        except Exception as e:
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {e}")
        finally:
            if conn:
                conn.close()

    def back_to_list(self):
        self.root.destroy()
        from ui.order_window import OrdersViewWindow
        OrdersViewWindow(tk.Toplevel())

class OrdersViewWindow:
    def __init__(self, root):
        self.root = root
        self.root.title("–í—Å–µ –∑–∞–∫–∞–∑—ã")
        self.root.geometry("900x500")
        center_window(self.root, 900, 500)
        self.create_widgets()

    def create_widgets(self):
        tk.Label(self.root, text="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤", font=("Arial", 16)).pack(pady=10)

        # –ö–∞–Ω–≤–∞—Å —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
        frame = tk.Frame(self.root)
        frame.pack(fill=tk.BOTH, expand=True)

        canvas = tk.Canvas(frame)
        scrollbar = tk.Scrollbar(frame, orient="vertical", command=canvas.yview)
        scrollable_frame = tk.Frame(canvas)

        scrollable_frame.bind(
            "<Configure>",
            lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
        )

        canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
        canvas.configure(yscrollcommand=scrollbar.set)

        canvas.pack(side="left", fill="both", expand=True)
        scrollbar.pack(side="right", fill="y")

        self.load_orders(scrollable_frame)

        tk.Button(self.root, text="–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é", command=self.back_to_staff_menu).pack(pady=10)

    def load_orders(self, frame):
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute('''
            SELECT o.id, c.name, o.status, o.total_price, o.created_at
            FROM orders o
            JOIN clients c ON o.client_id = c.id
            ORDER BY o.created_at DESC
        ''')
        rows = cursor.fetchall()
        conn.close()

        for row in rows:
            order_id, client_name, status, total_price, created_at = row

            order_frame = tk.Frame(frame, relief="solid", bd=1, padx=10, pady=10)
            order_frame.pack(fill="x", pady=5)

            detail_label = tk.Label(order_frame, text=f"ID: {order_id} | –ö–ª–∏–µ–Ω—Ç: {client_name} | –°—Ç–∞—Ç—É—Å: {status} | –í—Ä–µ–º—è: {created_at} | –°—É–º–º–∞: {total_price} —Ä—É–±", justify="left")
            detail_label.pack(anchor="w")

            btn_frame = tk.Frame(order_frame)
            btn_frame.pack(pady=5)

            tk.Button(btn_frame, text="–ò–∑–º–µ–Ω–∏—Ç—å", width=10,
                      command=lambda oid=order_id: self.open_edit_window(oid)).pack(side="left", padx=5)
            tk.Button(btn_frame, text="–£–¥–∞–ª–∏—Ç—å", width=10,
                      command=lambda oid=order_id: self.delete_order(oid, frame)).pack(side="left", padx=5)

    def open_edit_window(self, order_id):
        self.root.withdraw()
        OrderStatusUpdateWindow(tk.Toplevel(), order_id)

    def delete_order(self, order_id, frame):
        confirm = messagebox.askyesno("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ", f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ #{order_id}?")
        if confirm:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM orders WHERE id=?", (order_id,))
            conn.commit()
            conn.close()

            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
            frame.destroy()

            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ (—É–¥–∞–ª–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑ –±–æ–ª—å—à–µ –Ω–µ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—Å—è)
            self.root.withdraw()
            from ui.order_window import OrdersViewWindow
            OrdersViewWindow(tk.Toplevel())
            self.root.destroy()

    def back_to_staff_menu(self):
        self.root.destroy()
        from ui.staff_window import StaffMainWindow
        StaffMainWindow(tk.Tk())