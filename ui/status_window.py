import json
import tkinter as tk
from tkinter import simpledialog, messagebox
from datetime import datetime, timedelta
from tkinter import ttk
from database import get_connection
from utils import center_window

class StatusWindow:
    def __init__(self, root, order_id):
        self.root = root
        self.root.title("–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞")
        self.root.geometry("600x450")
        center_window(self.root, 600, 450)
        self.order_id = order_id
        self.client_id = None  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–∞
        self.status = "–ó–∞–≥—Ä—É–∑–∫–∞..."
        self.cancel_reason = None
        self.created_time = None
        self.cooking_ends = None
        self.create_widgets()
        self.load_order_info()
        self.start_auto_update()

    def create_widgets(self):
        self.status_label = tk.Label(self.root, text="–°—Ç–∞—Ç—É—Å: –ó–∞–≥—Ä—É–∑–∫–∞...", font=("Arial", 16))
        self.status_label.pack(pady=20)
        self.time_label = tk.Label(self.root, text="–í—Ä–µ–º—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: --", font=("Arial", 14))
        self.time_label.pack(pady=10)
        self.progress = tk.Label(self.root, text="–≠—Ç–∞–ø—ã –≥–æ—Ç–æ–≤–∫–∏:", font=("Arial", 14))
        self.progress.pack(pady=10)
        self.steps_labels = []
        steps = ["–ó–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤", "–í—ã–ø–µ–∫–∞–Ω–∏–µ", "–£–ø–∞–∫–æ–≤–∫–∞", "–ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"]
        for step in steps:
            label = tk.Label(self.root, text=f"üîπ {step}")
            label.pack(anchor="w", padx=40)
            self.steps_labels.append(label)

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ (–¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞)
        self.cancel_button = tk.Button(self.root, text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", fg="red", command=self.start_fight_game)
        self.cancel_button.pack(pady=10)

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" ‚Äî –æ–Ω–∞ –±—É–¥–µ—Ç —É–¥–∞–ª—è—Ç—å –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –æ–Ω –æ—Ç–º–µ–Ω—ë–Ω
        self.back_button = ttk.Button(self.root, text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", command=self.back_to_menu)
        self.back_button.pack(pady=10)

        # –í–∏–¥–∂–µ—Ç –¥–ª—è –ø—Ä–∏—á–∏–Ω—ã –æ—Ç–º–µ–Ω—ã (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑)
        self.cancellation_label = None

    def load_order_info(self):
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT client_id, status, created_at, details, cancel_reason FROM orders WHERE id=?", (self.order_id,))
        row = cursor.fetchone()
        conn.close()
        if row:
            self.client_id, self.status, self.created_at, self.details_json, self.cancel_reason = row
            self.created_time = datetime.strptime(self.created_at, "%Y-%m-%d %H:%M:%S")
            self.cooking_ends = self.created_time + timedelta(minutes=15)
        else:
            messagebox.showinfo("–û—à–∏–±–∫–∞", "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.root.destroy()
            from ui.main_window import MainWindow
            MainWindow(tk.Tk(), client_id=self.client_id)
            return

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–∞–≤ –∑–∞–∫–∞–∑–∞
        if self.details_json:
            try:
                self.order_details = json.loads(self.details_json)
                tk.Label(self.root, text="–í–∞—à –∑–∞–∫–∞–∑:", font=("Arial", 14)).pack(pady=5)
                detail_text = "\n".join(
                    [f"{item['name']} x{item['quantity']}" for item in self.order_details]
                )
                tk.Label(self.root, text=detail_text, justify="left").pack(padx=20, pady=5)
                total = sum(item["price"] * item["quantity"] for item in self.order_details)
                tk.Label(self.root, text=f"–û–±—â–∞—è —Å—É–º–º–∞: {total:.2f} —Ä—É–±", fg="blue", font=("Arial", 12)).pack(pady=5)
            except Exception as e:
                print("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞:", e)

    def show_cancellation_reason(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã"""
        if self.cancellation_label:
            self.cancellation_label.destroy()  # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –Ω–∞–¥–ø–∏—Å—å
        reason_text = self.cancel_reason or "–ë–µ–∑ —É–∫–∞–∑–∞–Ω–∏—è –ø—Ä–∏—á–∏–Ω—ã"
        self.cancellation_label = tk.Label(
            self.root,
            text=f"‚ùå –ó–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω\n–ü—Ä–∏—á–∏–Ω–∞: {reason_text}",
            fg="red",
            font=("Arial", 12),
            justify="center"
        )
        self.cancellation_label.pack(pady=20)

    def delete_order_from_db(self):
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM orders WHERE id=?", (self.order_id,))
        conn.commit()
        conn.close()

    def start_auto_update(self):
        self.update_status()
        self.root.after(3000, self.start_auto_update)

    def update_status(self):
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT status, cancel_reason, cooking_started_at, cooking_ends_at FROM orders WHERE id=?", (self.order_id,))
        row = cursor.fetchone()
        conn.close()
        if row:
            new_status, self.cancel_reason, cooking_started, cooking_ends = row
            self.status = new_status
            colors = {
                "–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è": "gray",
                "–ü—Ä–∏–Ω—è—Ç": "orange",
                "–ì–æ—Ç–æ–≤–∏—Ç—Å—è": "blue",
                "–ì–æ—Ç–æ–≤": "green",
                "–í—ã–¥–∞–Ω": "darkgreen",
                "–û—Ç–º–µ–Ω—ë–Ω": "red"
            }
            self.status_label.config(text=f"–°—Ç–∞—Ç—É—Å: {self.status}", fg=colors.get(self.status, "black"))

            now = datetime.now()
            if self.status == "–ì–æ—Ç–æ–≤–∏—Ç—Å—è" and cooking_started:
                cooking_started_dt = datetime.strptime(cooking_started, "%Y-%m-%d %H:%M:%S")
                cooking_ends_dt = datetime.strptime(cooking_ends, "%Y-%m-%d %H:%M:%S")
                remaining = cooking_ends_dt - now
                minutes, seconds = divmod(remaining.seconds, 60)
                self.time_label.config(text=f"–í—Ä–µ–º—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: {minutes} –º–∏–Ω {seconds} —Å–µ–∫")
            elif self.status == "–ì–æ—Ç–æ–≤":
                self.time_label.config(text="–í—Ä–µ–º—è –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: –ì–æ—Ç–æ–≤!")
            elif self.status == "–û—Ç–º–µ–Ω—ë–Ω":
                self.time_label.config(text="")
                self._set_steps(["‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω", "", "", "", ""])
                self.show_cancellation_reason()  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã
            else:
                self.time_label.config(text="---")

            # –û–±–Ω–æ–≤–ª—è–µ–º —ç—Ç–∞–ø—ã
            if self.status == "–û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è":
                self._set_steps(["‚úî –û–∂–∏–¥–∞–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–∏—è"], reset=True)
            elif self.status == "–ü—Ä–∏–Ω—è—Ç":
                self._set_steps([
                    "‚úî –ü—Ä–∏–Ω—è—Ç",
                    "üî∏ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
                    "üî∏ –í—ã–ø–µ–∫–∞–Ω–∏–µ",
                    "üî∏ –£–ø–∞–∫–æ–≤–∫–∞",
                    "üî∏ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
                ])
            elif self.status == "–ì–æ—Ç–æ–≤–∏—Ç—Å—è":
                self._set_steps([
                    "‚úî –ü—Ä–∏–Ω—è—Ç",
                    "‚úî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
                    "‚úî –í—ã–ø–µ–∫–∞–Ω–∏–µ",
                    "‚úî –£–ø–∞–∫–æ–≤–∫–∞",
                    "üî∏ –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
                ])
            elif self.status == "–ì–æ—Ç–æ–≤":
                self._set_steps([
                    "‚úî –ü—Ä–∏–Ω—è—Ç",
                    "‚úî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤",
                    "‚úî –í—ã–ø–µ–∫–∞–Ω–∏–µ",
                    "‚úî –£–ø–∞–∫–æ–≤–∫–∞",
                    "‚úî –ì–æ—Ç–æ–≤ –∫ –≤—ã–¥–∞—á–µ"
                ])

    def _set_steps(self, texts, reset=False):
        for i in range(len(self.steps_labels)):
            if i < len(texts) and texts[i]:
                self.steps_labels[i].config(text=texts[i])
            else:
                self.steps_labels[i].config(text="üî∏ –≠—Ç–∞–ø")

    def back_to_menu(self):
        # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑, –µ—Å–ª–∏ –æ–Ω –≤—ã–¥–∞–Ω –∏–ª–∏ –æ—Ç–º–µ–Ω—ë–Ω
        if self.status in ["–û—Ç–º–µ–Ω—ë–Ω", "–í—ã–¥–∞–Ω"]:
            self.delete_order_from_db()

        self.root.destroy()
        from ui.main_window import MainWindow
        MainWindow(tk.Tk(), client_id=self.client_id)

    def start_fight_game(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–∏–Ω–∏-–∏–≥—Ä—É '–î—Ä–∞–∫–∞' –ø–µ—Ä–µ–¥ –æ—Ç–º–µ–Ω–æ–π –∑–∞–∫–∞–∑–∞."""
        self.cancel_button.config(state=tk.DISABLED)  # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        self.fight_window = tk.Toplevel(self.root)
        self.fight_window.title("–ú–∏–Ω–∏-–∏–≥—Ä–∞: –î—Ä–∞–∫–∞")
        self.fight_window.geometry("400x300")
        center_window(self.fight_window, 400, 300)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID after-—Ç–∞–π–º–µ—Ä–∞
        self.staff_timer_id = None

        # –ù–∞–¥–ø–∏—Å–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º–∏
        self.user_percent_label = tk.Label(self.fight_window, text="–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: 0%", font=("Arial", 12))
        self.user_percent_label.pack(pady=5)
        self.staff_percent_label = tk.Label(self.fight_window, text="–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: 0%", font=("Arial", 12))
        self.staff_percent_label.pack(pady=5)

        # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–æ—Å–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.user_progress = ttk.Progressbar(self.fight_window, length=300, mode='determinate', value=0)
        self.user_progress.pack(pady=10)
        self.staff_progress = ttk.Progressbar(self.fight_window, length=300, mode='determinate', value=0)
        self.staff_progress.pack(pady=10)

        # –ù–∞—á–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.user_progress_value = 0
        self.staff_progress_value = 0

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        self.max_progress = 100

        # –°–∫–æ—Ä–æ—Å—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—É–≤–µ–ª–∏—á–µ–Ω–∞ –≤ 5 —Ä–∞–∑)
        self.staff_speed = 30  # –ü—Ä–æ—Ü–µ–Ω—Ç—ã –≤ —Å–µ–∫—É–Ω–¥—É

        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.attack_button = tk.Button(self.fight_window, text="–ê—Ç–∞–∫–æ–≤–∞—Ç—å", command=self.increase_user_progress)
        self.attack_button.pack(pady=10)

        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–±–µ–¥–µ/–ø–æ—Ä–∞–∂–µ–Ω–∏–∏
        self.result_label = tk.Label(self.fight_window, text="", font=("Arial", 14))
        self.result_label.pack(pady=20)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
        self.staff_timer_id = self.fight_window.after(1000, self.auto_increase_staff_progress)

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞
        self.fight_window.protocol("WM_DELETE_WINDOW", self.on_close_fight_window)

    def increase_user_progress(self):
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏."""
        if self.user_progress_value < self.max_progress:
            self.user_progress_value += 5  # –ö–∞–∂–¥—ã–π –∫–ª–∏–∫ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –Ω–∞ 5%
            self.user_progress["value"] = self.user_progress_value
            self.update_user_percent_label()
            self.check_game_over()

    def auto_increase_staff_progress(self):
        """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."""
        if self.staff_progress_value < self.max_progress:
            self.staff_progress_value += self.staff_speed  # –ê–≤—Ç–æ—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –Ω–∞ 15% –≤ —Å–µ–∫—É–Ω–¥—É
            self.staff_progress["value"] = self.staff_progress_value
            self.update_staff_percent_label()
            self.check_game_over()
            self.staff_timer_id = self.fight_window.after(1000, self.auto_increase_staff_progress)
        else:
            self.check_game_over()

    def update_user_percent_label(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –º–µ—Ç–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.user_percent_label.config(text=f"–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å: {int(self.user_progress_value)}%")

    def update_staff_percent_label(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –º–µ—Ç–∫–∏ —Å –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞"""
        self.staff_percent_label.config(text=f"–ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞: {int(self.staff_progress_value)}%")

    def check_game_over(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞."""
        if self.user_progress_value >= self.max_progress:
            self.result_label.config(text="üéâ –í—ã –ø–æ–±–µ–¥–∏–ª–∏! –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω.", fg="green")
            self.end_game(cancel_order=True)
        elif self.staff_progress_value >= self.max_progress:
            self.result_label.config(text="‚ùå –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏. –ó–∞–∫–∞–∑ –Ω–µ –æ—Ç–º–µ–Ω—ë–Ω.", fg="red")
            self.end_game(cancel_order=False)

    def end_game(self, cancel_order):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –∏–≥—Ä—É –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è."""
        self.attack_button.config(state=tk.DISABLED)
        if self.staff_timer_id:
            self.fight_window.after_cancel(self.staff_timer_id)
            self.staff_timer_id = None
        self.fight_window.after(2000, self.fight_window.destroy)  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã
        if cancel_order:
            self.cancel_order()  # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–∫–∞–∑
        else:
            self.root.quit()  # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

    def on_close_fight_window(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –∏–≥—Ä—ã."""
        if self.staff_timer_id:
            self.fight_window.after_cancel(self.staff_timer_id)
            self.staff_timer_id = None
        self.root.quit()  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–∫—Ä–æ–µ—Ç –æ–∫–Ω–æ, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ

    def cancel_order(self):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–∫–∞–∑ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∏–≥—Ä—ã."""
        reason = "–ö–ª–∏–µ–Ω—Ç –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑"
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE orders SET status='–û—Ç–º–µ–Ω—ë–Ω', cancel_reason=? WHERE id=?", (reason, self.order_id))
        conn.commit()
        conn.close()
        messagebox.showinfo("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω", "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω.")
        self.root.destroy()
        from ui.main_window import MainWindow
        MainWindow(tk.Tk(), client_id=self.client_id)